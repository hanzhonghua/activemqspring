<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:amq="http://activemq.apache.org/schema/core"
    xmlns:jms="http://www.springframework.org/schema/jms"
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/jms
        http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd">
        
    <!-- 第三方MQ工厂: ConnectionFactory -->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <!-- ActiveMQ Address -->
        <property name="brokerURL" value="${activemq.brokerURL}" />
        <property name="userName" value="${activemq.userName}"></property>
        <property name="password" value="${activemq.password}"></property> 
        <!-- 消息异步发送 -->
        <property name="useAsyncSend" value="true"></property> 
        <!-- 限制broker确认收到消息前生产者所能发送的最大消息数据量(字节) -->
        <property name="producerWindowSize" value="1"></property>
        <!-- 监测服务mq服务器连接状态 -->
        <property name="transportListener" >
            <bean class="com.activemq.failover.ActiveMQTransportListener"></bean>
        </property>
    </bean>
    
    <!-- 
        ActiveMQ为我们提供了一个PooledConnectionFactory，通过往里面注入一个ActiveMQConnectionFactory
                         可以用来将Connection、Session和MessageProducer池化，这样可以大大的减少我们的资源消耗,要依赖于 activemq-pool包
     -->
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
        <property name="connectionFactory" ref="targetConnectionFactory" />
        <property name="maxConnections" value="${activemq.pool.maxConnections}" />
    </bean>
    
   <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
        <property name="targetConnectionFactory" ref="pooledConnectionFactory" />
    </bean>
    
    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <!-- 队列模板 -->
    <bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">  
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
        <property name="connectionFactory" ref="connectionFactory"/>  
        <property name="defaultDestinationName" value="${activemq.queueName}"></property>
        <property name="pubSubDomain" value="false"></property>
        <!-- 消息持久化 默认1重启后删除 -->
        <property name="deliveryMode" value="2"></property>
    </bean> 
    <!-- Topic模板 -->
    <bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">  
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
        <property name="connectionFactory" ref="connectionFactory"/>  
        <property name="defaultDestinationName" value="${activemq.topicName}"></property>
        <property name="pubSubDomain" value="true"></property>
    </bean>
    
    <!-- 第一种监听方式：定义Queue监听器 -->
    <jms:listener-container destination-type="queue" container-type="default" connection-factory="connectionFactory" acknowledge="auto">
        <jms:listener destination="testQueue" ref="queueReceiver1"/>
        <jms:listener destination="testQueue" ref="queueReceiver2"/>
    </jms:listener-container>
   
    <!-- 另一种监听模式 -->
    <!-- <bean id="testQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>${activemq.queueName}</value>
        </constructor-arg>
    </bean> -->
    <!-- 配置自定义监听：MessageListener -->
    <!-- <bean id="queueMessageListener1" class="com.activemq.receiver.queue.QueueReceiver1"></bean>
    <bean id="queueMessageListener2" class="com.activemq.receiver.queue.QueueReceiver2"></bean> -->

    <!-- 将连接工厂、目标对了、自定义监听注入jms模板 -->
    <!-- <bean id="sessionAwareListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destination" ref="testQueue" />
        <property name="messageListener" ref="queueMessageListener1" />
    </bean> -->
    <!-- 另一种监听模式结束，如何配置多个监听？ -->
    
    <!-- 定义Topic监听器 -->
    <jms:listener-container destination-type="topic" container-type="default" connection-factory="connectionFactory" acknowledge="auto" >
        <jms:listener destination="testTopic" ref="topicReceiver1"/>
        <jms:listener destination="testTopic" ref="topicReceiver2"/>
    </jms:listener-container>
</beans>